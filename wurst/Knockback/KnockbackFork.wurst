package KnockbackFork

import Terrain
import TimerUtils
import TimedLoop
import TempGroups

//This is a fork of the standard wurst knockback system
//The constants have been changed, and some methods have been added to promote subclasssing

constant real STANDARD_DEST_RADIUS	  = 100.00
constant real STANDARD_UNIT_RADIUS	  = 75.00
constant real STANDARD_COLLISION_RADIUS = 100.0
constant real CHECK_HOW_OFTEN = 16.0 //If we're moving faster than this, check on points between start and destination with a distance of this between them
constant boolean STOP_WHEN_IMPASSABLE   = true
constant boolean USE_KNOCKBACK_EFFECTS  = false
constant boolean STOP_WHEN_UNIT_COLLISION = true
//will only be used, if USE_KNOCKBACK_EFFECTS is true
constant string EARTH_EFFECT					= "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
constant string WATER_EFFECT					= "Abilities\\Spells\\Undead\\AbsorbMana\\AbsorbManaBirthMissile.mdl"
constant string KNOCKBACK_EFFECT_ATTACHPOINT	= "origin"
constant boolean IGNORE_FLYING_UNITS			= true

//Used utility functions
function group.getSize() returns integer
	var c = 0
	for unit u in this
		c++
	return c
	
function unit.isFlying() returns boolean
	return IsUnitType(this, UNIT_TYPE_FLYING)

function countUnitsInRange(vec2 point, real radius) returns integer
	ENUM_GROUP.enumUnitsInRange(point, radius)
	var result = 0
	for unit u in ENUM_GROUP
		if u.isAlive() and u.getTypeId() != 'xcas' and not u.hasAbility(LOCUST_ID) and not u.isFlying()
			result++
	return result

//Enum for reasons
public enum StopReason
	UNIT_COLLISION
	TERRAIN_COLLISION
	DISTANCE_REACH

//The Knockback Struct
public class Knockback 
	use TimedLoop

	boolean autodestroy = true

	private unit target = null
	private real timeOver = 0.00
	private real currentSpeed = 0.00
	private real movedDistance = 0.00
	private real duration = 0.00
	private real distance = 0.00
	private real knockbackAngle = 0.00
	
	//variables you can change while the unit is being knocked back
	real aoeUnit = STANDARD_UNIT_RADIUS
	real aoeDest = STANDARD_DEST_RADIUS
	
	
	//private variables
	private real deceleration = 0.00
	private real cos = 0.00
	private real sin = 0.00
	private effect fx = null
	private effect kbEffect = null
	private int kbEffectMode = 0
	private boolean ranDeathAction = false
	private boolean isGround = false
	

	
	//just some static variables to make the system faster/work
	private static boolexpr unitFilter  = null 
	private static boolexpr destFilter  = Condition(function destFilterMethod)
	private static code unitActions	 = null
	private static code destActions	 = null
	private static thistype temp		= null
	private static rect destRect		= Rect(0,0,1,1)
	private static real tx			  = 0.00
	private static real ty			  = 0.00
	
	//this is the filter for destructables around the target
	private static function destFilterMethod() returns boolean
		real x = GetDestructableX(GetFilterDestructable())
		real y = GetDestructableY(GetFilterDestructable())
		return (Knockback.tx-x)*(Knockback.tx-x) + (Knockback.ty-y)*(Knockback.ty-y) <= Knockback.temp.aoeDest * Knockback.temp.aoeDest
	
	
	//cleans up the struct and runs the onEnd actions
	ondestroy
		if fx != null
			DestroyEffect(fx)
		
		if USE_KNOCKBACK_EFFECTS
			DestroyEffect(kbEffect)


	//Checks for any units in the path on given point, and returns if passable
	private function checkForUnit(vec2 where) returns boolean
		return not (STOP_WHEN_UNIT_COLLISION and countUnitsInRange(where, STANDARD_COLLISION_RADIUS) > 1) //If anyone else is found in range
		
	//Checks for any units in the path on given point, and returns if passable
	private function checkForTerrain(vec2 where) returns boolean
		return isTerrainWalkable(where.x, where.y) //If anyone else is found in range
	
	private function checkMovement(vec2 toWhere) returns boolean
		if checkForTerrain(toWhere)
			if checkForUnit(toWhere)
				return true
			else
				stop(StopReason.UNIT_COLLISION)
				return false
		else
			stop(StopReason.TERRAIN_COLLISION)
			return false
	
	//this method will be called every TIMER_INTERVAL and update the units position as well as runs the onLoop action
	override function onTimedLoop()
		let x = GetUnitX(target) + (currentSpeed) * cos
		let y = GetUnitY(target) + (currentSpeed) * sin
					
		//change the time which has been gone
		timeOver += ANIMATION_PERIOD
		currentSpeed -= deceleration
		movedDistance += currentSpeed
		
		///check for destructables arround the target
		Knockback.tx = x
		Knockback.ty = y
		SetRect(Knockback.destRect, -aoeDest, -aoeDest, aoeDest, aoeDest)
		MoveRectTo(Knockback.destRect, x, y)
		EnumDestructablesInRect(Knockback.destRect, Knockback.destFilter, Knockback.destActions)
		
		//check pathability and new unit position if walkable
		var movementSuccess = true
		
		if not checkMovement(vec2(x, y))
			movementSuccess = false
			
		var distChecked = CHECK_HOW_OFTEN
		while movementSuccess and distChecked <= currentSpeed
			let cx = target.getX() + currentSpeed * cos
			let cy = target.getY() + currentSpeed * sin
			if not checkMovement(vec2(cx, cy))
				movementSuccess = false
				break
			distChecked += CHECK_HOW_OFTEN
			
		if movementSuccess
			target.setX(x)
			target.setY(y)
			
		//change the knockback effect if the user want to use it
		if USE_KNOCKBACK_EFFECTS
			if isGround or not IGNORE_FLYING_UNITS
				if kbEffectMode == 2 and isTerrainLand(x, y)
					DestroyEffect(kbEffect)
					kbEffect = AddSpecialEffectTarget(EARTH_EFFECT, target, KNOCKBACK_EFFECT_ATTACHPOINT)
				else if kbEffectMode == 1 and isTerrainShallowWater(x, y)
					DestroyEffect(kbEffect)
					kbEffect = AddSpecialEffectTarget(WATER_EFFECT, target, KNOCKBACK_EFFECT_ATTACHPOINT)
				
		
		//if the knockback ended because the target reached the end or the speed is smaller than 0
		if currentSpeed <= 0 or movedDistance >= distance
			stop(StopReason.DISTANCE_REACH)

		
		
	protected function stop(StopReason reason)
		if autodestroy
			stopTimedLoopAndDestroy()
		else
			stopTimedLoop()
	
	//adds or changes the current effect attached to the target
	function addSpecialEffect( string fxpath, string attachPoint )
		if fx != null
			DestroyEffect(fx)
		
		fx = AddSpecialEffectTarget(fxpath, target, attachPoint)
	
	//changes the angle of the knockback
	function setAngle( real newAngle )
		knockbackAngle = newAngle
		cos = Cos(knockbackAngle * bj_DEGTORAD)
		sin = Sin(knockbackAngle * bj_DEGTORAD)
		
	function getAngleDeg() returns real
		return knockbackAngle

			
	
	//this method creates a new knockback
	construct(unit target, real distance, real time, angle xyangle )
		real speed = 2 * distance / ((time / ANIMATION_PERIOD) + 1)
		real deceleration = speed / (time / ANIMATION_PERIOD)
					
		//variables
		this.target = target
		this.knockbackAngle = xyangle.radians()
		this.distance = distance
		this.duration = time
		this.currentSpeed = speed
		this.deceleration = deceleration
		this.cos = Cos(this.knockbackAngle)
		this.sin = Sin(this.knockbackAngle)
		
		this.isGround = not IsUnitType(this.target, UNIT_TYPE_FLYING)
		
		//Adds the knockback effect when USE_KNOCKBACK_EFFECTS is to true
		if USE_KNOCKBACK_EFFECTS
			if isGround or not IGNORE_FLYING_UNITS
				if isTerrainLand(GetUnitX(target), GetUnitY(target))
					kbEffect = AddSpecialEffectTarget(EARTH_EFFECT, target, KNOCKBACK_EFFECT_ATTACHPOINT)
					kbEffectMode = 1
				else if isTerrainShallowWater(GetUnitX(target), GetUnitY(target))
					kbEffect = AddSpecialEffectTarget(WATER_EFFECT, target, KNOCKBACK_EFFECT_ATTACHPOINT)
					kbEffectMode = 2
				
			
		
		//start the timer if the new instance is the only one
		startTimedLoop()





