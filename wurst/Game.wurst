package Game

import ArrayList
import PlayerAvatar
import TimerDialog
import GoldMine
import GoldVein
import Spots
import TreasurePosition
import LineBlocker
import ClosureTimers
import Zeppelin //To set up spots
import Coin
import Kicking

constant maxPlayerIndex = 11
constant spawn = vec2(4500, 4100)
constant distance = 250.0
constant face = angle(0)

constant timeBeforeInitBalance = 30.0
constant goldMineTime = 140.0
constant goldMineMessageTime = 12.0
constant goldMineMessageColor = "|cffaaaaaa"

constant goldVeinLifeTime = 50.0
constant goldVeinsWantedAlive = 20
constant goldVeinChanceMaximum = 1.0
constant goldVeinCheckInterval = goldVeinChanceMaximum * goldVeinLifeTime / goldVeinsWantedAlive

constant playersPerArea = 3
constant playersMax = 12
constant areasMax = 4

constant shopPos = vec2(400, 0)
constant shopFace = (270.0).asAngleDegrees()
constant shopOwner = Player(15) //Neutral passive
constant shopId = 'n001'

constant music = "Sound\\Music\\mp3Music\\Orc3.mp3"

constant introMessageTime = 4.0
constant introSound = gg_snd_GameFound

//We brute force vein picking cuz I'm lazy
constant veinSpotAttemptsMax = 80

//You can also find a bunch of configurables in clearMap() and initVeinSpots

//==================================================================================================

function initVeinSpots() returns Spots
	let areasOpened = areasOpened()
	let result = new Spots()
	if areasOpened >= 1
		result.add(vec2(5318, 2513))
		result.add(vec2(4421, 2096))
		result.add(vec2(5342, 1955))
		result.add(vec2(4917, 3798))
		result.add(vec2(3996, 5012))
		result.add(vec2(3040, 5070))
		result.add(vec2(2307, 4916))
		result.add(vec2(855, 4690))
		result.add(vec2(1109, 3642))
		result.add(vec2(1206, 2347))
		result.add(vec2(950, 960))
		result.add(vec2(1808, 250))
		result.add(vec2(2950, 450))
		result.add(vec2(3753, 160))
		result.add(vec2(5200, -110))
		result.add(vec2(3250, 1206))
		result.add(vec2(2497, 1644))
		result.add(vec2(1605, 2218))
		result.add(vec2(2442, 3176))
		result.add(vec2(3564, 2723))
		result.add(vec2(3623, 3655))
		result.add(vec2(2737, 2100))
		result.add(vec2(1935, 3373))
		result.add(vec2(1415, 2737))
		result.add(vec2(3687, 767))
	if areasOpened >= 2
		result.add(vec2(1260, 376))
		result.add(vec2(1153, -1684))
		result.add(vec2(1018, -2530))
		result.add(vec2(403, -3352))
		result.add(vec2(1068, -3625))
		result.add(vec2(1932, -3288))
		result.add(vec2(752, -4965))
		result.add(vec2(2309, -4844))
		result.add(vec2(3313, -4839))
		result.add(vec2(1935, -3985))
		result.add(vec2(4206, -4736))
		result.add(vec2(4722, -3710))
		result.add(vec2(4391, -3065))
		result.add(vec2(2864, -2447))
		result.add(vec2(3713, -1717))
		result.add(vec2(5288, -1233))
		result.add(vec2(3309, -1078))
		result.add(vec2(2312, -1872))
		result.add(vec2(2800, -880))
		result.add(vec2(4498, -849))
		result.add(vec2(3879, -4206))
		result.add(vec2(1944, -1500))
	if areasOpened >= 3
		result.add(vec2(-1079, 5020))
		result.add(vec2(-440, 3851))
		result.add(vec2(-1048, 3381))
		result.add(vec2(-1050, 250))
		result.add(vec2(-550, 2189))
		result.add(vec2(-1328, 1550))
		result.add(vec2(-660, 1038))
		result.add(vec2(-1530, 1010))
		result.add(vec2(-2450, 1050))
		result.add(vec2(-3865, 1278))
		result.add(vec2(-4517, 1450))
		result.add(vec2(-5150, 2000)) //Top left begin
		result.add(vec2(-5100, 4500))
		result.add(vec2(-4500, 5200))
		result.add(vec2(-4300, 4381))
		result.add(vec2(-3750, 5200))
		result.add(vec2(-3390, 4800)) //Top left end
		result.add(vec2(-2500, 5230))
		result.add(vec2(-1450, 4530))
		result.add(vec2(-2170, 3970))
		result.add(vec2(-3873, 4960))
		result.add(vec2(-1850, 2802))
	if areasOpened >= 4
		result.add(vec2(-5361, -1600))
		result.add(vec2(-4787, -2306))
		result.add(vec2(-4954, -3367))
		result.add(vec2(-4347, -4339))
		result.add(vec2(-4213, -5147))
		result.add(vec2(-2945, -4772))
		result.add(vec2(-2340, -4376))
		result.add(vec2(-2700, -3600))
		result.add(vec2(-3962, -2813))
		result.add(vec2(-2977, -2772))
		result.add(vec2(-2739, -24311))
		result.add(vec2(-919, -4649))
		result.add(vec2(-957, -3383))
		result.add(vec2(-1676, -2500))
		result.add(vec2(-2995, -1390))
		result.add(vec2(-1652, -1401))
		result.add(vec2(-850, -1865))
		result.add(vec2(-3704, -739))
		result.add(vec2(-2934, -1149))
		result.add(vec2(-3493, -2172))
		result.add(vec2(-1787, -3765))
		result.add(vec2(-5500, -5325))
	return result
	
function initMineSpots() returns TreasurePositions
	let areasOpened = areasOpened()
	let result = new TreasurePositions()
	if areasOpened >= 1
		result.add(vec2(2050, 4616), (270.0).asAngleDegrees())
		result.add(vec2(4609, 517), (270.0).asAngleDegrees())
	if areasOpened >= 2
		result.add(vec2(4600, -1700), (270.0).asAngleDegrees())
		result.add(vec2(1957, -4376), (270.0).asAngleDegrees())
	if areasOpened >= 3
		result.add(vec2(-2100, 4577), (270.0).asAngleDegrees())
		result.add(vec2(-4612, 535), (270.0).asAngleDegrees())
	if areasOpened >= 4
		result.add(vec2(-2000, -4600), (270.0).asAngleDegrees())
		result.add(vec2(-4500, -1500), (270.0).asAngleDegrees())
		
	return result
	
function areasOpened() returns integer
	var playersPlaying = 0
	for i = 0 to playersMax - 1
		if players[i].getSlotState() == PLAYER_SLOT_STATE_PLAYING and not players[i].wasKicked()
			playersPlaying++
	if playersPlaying <= 4
		return 1
	else if playersPlaying <= 7
		return 2
	else if playersPlaying <= 10
		return 3
	else
		return 4
	
public class Game
	private static thistype current
	private static boolean firstGameHasStarted = false
	
	private timer autoBalancingTimer
	private timerdialog autoBalancingTimerDialog
	private timer goldMineTimer
	private timerdialog goldMineTimerDialog
	private CallbackPeriodic goldVeinCallback
	private Spots veinSpots
	private TreasurePositions mineSpots
	private ArrayList<LineBlocker> blockers
	private integer areasOpened
	
	construct()
	
		StopMusic(false)
		PlayMusic(music)
	
		ClearTextMessages()
		printTimed("A new game has started!", introMessageTime)
		StartSound(introSound)
	
		if firstGameHasStarted
			destroy current
		current = this
		firstGameHasStarted = true
	
		veinSpots = initVeinSpots()
		mineSpots = initMineSpots()
		blockers = new ArrayList<LineBlocker>()
		initLineBlocks()
		areasOpened = areasOpened()
		
		//Creating shop
		//We don't need to remember it - it will be cleaned up when we kill all units on destroy anyways
		createUnit(shopOwner, shopId, shopPos, shopFace)
			
		//Creating avatars
		PlayerAvatar.disableAutoBalance()
		let difAngle = 2 * PI / (maxPlayerIndex + 1)
		for i = 0 to maxPlayerIndex
			if players[i].getSlotState() == PLAYER_SLOT_STATE_PLAYING and not players[i].wasKicked()
				new PlayerAvatar(players[i], false, vec2(spawn.x+distance*(difAngle*i).cos(), spawn.y+distance*(difAngle*i).sin()), face)
			
		
		//Forwarding points
		PlayerAvatar.setSpawnPoints(veinSpots)
		zeppelinSetSpots(veinSpots)
		
		//Setting up timers
		goldMineTimer = getTimer()
		..setData(this castTo int)
		goldMineTimerDialog = null
		autoBalancingTimer = getTimer()
		autoBalancingTimer.setData(this castTo int)
		autoBalancingTimer.start(timeBeforeInitBalance, () -> begin
			let self = GetExpiredTimer().getData() castTo thistype
			self.autoBalancingTimerDialog.destr()
			self.autoBalancingTimerDialog = null
			PlayerAvatar.enableAutoBalance()
			printTimed("The first humans will now be chosen!", 6.0)
			PlayerAvatar.autoAdjustChasers(true)
			self.goldMineTimer.startPeriodic(goldMineTime, () -> begin
				(GetExpiredTimer().getData() castTo thistype).spawnMine()
			end)
			self.goldMineTimerDialog = createTimerDialog(self.goldMineTimer)
			..setTitle("Goldmine spawning in...")
			..show()
		end)
		autoBalancingTimerDialog = createTimerDialog(autoBalancingTimer)
		..setTitle("Chasers spawn in...")
		..show()
		goldVeinCallback = ((CallbackPeriodic cb) -> begin

			if GetRandomReal(0, 1) < goldVeinChanceMaximum * areasOpened / areasMax and veinSpots.anyIsFree()
				new GoldVein(veinSpots.getRandom())
		end)
		doPeriodically(goldVeinCheckInterval, goldVeinCallback)
		
	ondestroy
		autoBalancingTimer.release()
		if autoBalancingTimerDialog != null
			autoBalancingTimerDialog.destr()
		goldMineTimer.release()
		if goldMineTimerDialog != null
			goldMineTimerDialog.destr()
		destroy goldVeinCallback
		for LineBlocker b in blockers
			destroy b
		destroy blockers
		PlayerAvatar.destroyInstances()
		clearMap()
		destroy veinSpots
		destroy mineSpots
		
	private function clearMap()
		ENUM_GROUP.enumUnitsInRange(vec2(0, 0), INT_LIMIT.toReal())
		var killedAny = false
		for unit u in ENUM_GROUP
			if u.isAlive() and (u.getTypeId() != DUMMY_UNIT_ID and u.getTypeId() != 'cdum' and u.getTypeId() != 'xcas') 
				u.kill()
				killedAny = true
		if killedAny //We'll keep clearing until we find nothing; some may respawn on death
			clearMap()
		Coin.clearAll() //Removing any coins that has potentially spawned from killing*/
		
	private function initLineBlocks()
		let areasOpened = areasOpened()
		if areasOpened == 1 or areasOpened == 2 
			blockers.add(new LineBlocker(vec2(0, 4676), vec2(0, 4000)))
			blockers.add(new LineBlocker(vec2(0, 2160), vec2(0, 1430)))
			blockers.add(new LineBlocker(vec2(-840, -100), vec2(-840, -780)))
		if areasOpened == 1
			blockers.add(new LineBlocker(vec2(1056, -650), vec2(6200, -650)))
		if areasOpened == 2 or areasOpened == 3
			blockers.add(new LineBlocker(vec2(0, -2000), vec2(0, -2710)))
			blockers.add(new LineBlocker(vec2(0, -4000), vec2(0, -4650)))
		if areasOpened == 3
			blockers.add(new LineBlocker(vec2(-1073, -650), vec2(-6200, -650)))
		
	
	private function spawnMine()
		let s = mineSpots.getRandom()
		new GoldMine(s.where, s.facing, true, true, true)
		printTimed(goldMineMessageColor+"A gold mine has been spawned! Looting it will provide unfathomable riches, but beware of competetors!|r", goldMineMessageTime)